/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_tensorflow_Tensor */

#ifndef _Included_org_tensorflow_Tensor
#define _Included_org_tensorflow_Tensor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_tensorflow_Tensor
 * Method:    allocate
 * Signature: (I[JJ)J
 */
JNIEXPORT jlong JNICALL Java_org_tensorflow_Tensor_allocate
  (JNIEnv *, jclass, jint, jlongArray, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    allocateScalarBytes
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_org_tensorflow_Tensor_allocateScalarBytes
  (JNIEnv *, jclass, jbyteArray);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    allocateNonScalarBytes
 * Signature: ([J[Ljava/lang/Object;)J
 */
JNIEXPORT jlong JNICALL Java_org_tensorflow_Tensor_allocateNonScalarBytes
  (JNIEnv *, jclass, jlongArray, jobjectArray);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    delete
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_tensorflow_Tensor_delete
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    buffer
 * Signature: (J)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_org_tensorflow_Tensor_buffer
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    dtype
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_tensorflow_Tensor_dtype
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    shape
 * Signature: (J)[J
 */
JNIEXPORT jlongArray JNICALL Java_org_tensorflow_Tensor_shape
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    setValue
 * Signature: (JLjava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_org_tensorflow_Tensor_setValue
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    scalarFloat
 * Signature: (J)F
 */
JNIEXPORT jfloat JNICALL Java_org_tensorflow_Tensor_scalarFloat
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    scalarDouble
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_tensorflow_Tensor_scalarDouble
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    scalarInt
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_tensorflow_Tensor_scalarInt
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    scalarLong
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_tensorflow_Tensor_scalarLong
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    scalarBoolean
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_tensorflow_Tensor_scalarBoolean
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    scalarBytes
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_tensorflow_Tensor_scalarBytes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_tensorflow_Tensor
 * Method:    readNDArray
 * Signature: (JLjava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_org_tensorflow_Tensor_readNDArray
  (JNIEnv *, jclass, jlong, jobject);

#ifdef __cplusplus
}
#endif
#endif
